/// <reference types="node" />
import { ChildProcess } from "child_process";
/** Execute a command in subprocess
 *
 * stdout and stderr from the subprocess are copied to this process's stdout
 * with a prefix indicating the command.
 *
 * @returns the process
 */
export declare function logExecArray(cmd: string, args?: string[], prefix?: string): ChildProcess;
/** Execute a command in subprocess
 *
 * stdout and stderr from the subprocess are echoed to our stdout (with a prefix
 * indicating the command).
 *
 * @returns the process
 */
export declare function logExec(cmdLine: string, prefix?: string): ChildProcess;
/** Execute a command in a subprocess.
 *
 * stdio is inherited from our process.
 *
 * @return a promise containing the return code of the command.
 */
export declare function run(cmdLine: string): Promise<number>;
export interface ExecResult {
    result: number;
    stdout: string[];
    stderr: string[];
}
/** Execute a command in a subprocess.
 *
 * @return a promise containing the return code of the command and the buffered
 * results from stdio.
 */
export declare function bufferedRun(cmdLine: string): Promise<ExecResult>;
export declare function serialExec(...cmds: string[]): Promise<number>;
/** return true if any files need compiling */
export declare function needsCompile(srcGlobs: string[], outDir: string): boolean;
export declare function time<T>(fn: () => T, label?: string): T;
