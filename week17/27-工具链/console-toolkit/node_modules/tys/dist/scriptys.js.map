{"version":3,"file":"scriptys.js","sources":["../src/execUtil.ts","../src/scriptysArgs.ts","../src/scriptys.ts"],"sourcesContent":["import { exec, spawn, ChildProcess } from \"child_process\";\nimport { once } from \"events\";\nimport glob from \"glob\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport util from \"util\";\nconst execPm = util.promisify(exec);\n\n/** Execute a command in subprocess\n *\n * stdout and stderr from the subprocess are copied to this process's stdout\n * with a prefix indicating the command.\n *\n * @returns the process\n */\nexport function logExecArray(\n  cmd: string,\n  args?: string[],\n  prefix?: string\n): ChildProcess {\n  const spawned = spawn(cmd, args);\n  const linePrefix = logPrefix();\n\n  spawned.stdout.on(\"data\", logger(linePrefix));\n  spawned.stderr.on(\"data\", logger(`${linePrefix}[2]`));\n\n  return spawned;\n\n  function logPrefix(): string {\n    if (prefix !== undefined) {\n      return prefix;\n    } else {\n      return cmd;\n    }\n  }\n}\n\nfunction logger(possiblePrefix: string) {\n  const prefix = possiblePrefix.length ? possiblePrefix + \": \" : \"\";\n  return (data: Buffer): void => {\n    const lines = data.toString();\n    const lineArray = lines.split(\"\\n\").filter((line) => line.length > 0);\n    for (const line of lineArray) {\n      console.log(`${prefix}${line}`);\n    }\n  };\n}\n\n/** Execute a command in subprocess\n *\n * stdout and stderr from the subprocess are echoed to our stdout (with a prefix\n * indicating the command).\n *\n * @returns the process\n */\nexport function logExec(cmdLine: string, prefix?: string): ChildProcess {\n  const { cmd, args } = splitCmdLine(cmdLine);\n  return logExecArray(cmd, args, prefix);\n}\n\n/** Execute a command in a subprocess.\n *\n * stdio is inherited from our process.\n *\n * @return a promise containing the return code of the command.\n */\nexport async function run(cmdLine: string): Promise<number> {\n  const { cmd, args } = splitCmdLine(cmdLine);\n  const childProc = spawn(cmd, args, { stdio: \"inherit\" });\n  const promisedResult: Promise<number> = once(childProc, \"exit\").then(\n    ([result]) => result\n  );\n  return promisedResult;\n}\n\nexport interface ExecResult {\n  result: number;\n  stdout: string[];\n  stderr: string[];\n}\n\n/** Execute a command in a subprocess.\n *\n * @return a promise containing the return code of the command and the buffered\n * results from stdio.\n */\nexport async function bufferedRun(cmdLine: string): Promise<ExecResult> {\n  let result = 0;\n  const { stdout, stderr } = await execPm(cmdLine).catch((e) => (result = e));\n\n  return {\n    result,\n    stdout,\n    stderr,\n  };\n}\n\ninterface CommandParts {\n  cmd: string;\n  args: string[];\n}\n\nfunction splitCmdLine(cmdLine: string): CommandParts {\n  const all = mkArgs(cmdLine);\n  const cmd = all[0];\n  const args = all.slice(1);\n  return {\n    cmd,\n    args,\n  };\n}\n\n/** split up a string containing command line arguments\n * @returns an array suitable for spawn or exec\n */\nfunction mkArgs(line: string): string[] {\n  const words = /(?:[^\\s\"]+|\"[^\"]*\")+/g;\n  const matched = line.match(words)!;\n  return [...matched];\n}\n\nexport async function serialExec(...cmds: string[]): Promise<number> {\n  for (const cmd of cmds) {\n    const proc = logExec(cmd);\n    const [result] = await once(proc, \"exit\");\n    if (result) return result;\n  }\n  return 0;\n}\n\n/** return true if any files need compiling */\nexport function needsCompile(srcGlobs: string[], outDir: string): boolean {\n  const files = srcGlobs.flatMap((src) => glob.sync(src));\n  const srcDestPairs = compilationPairs(files, outDir);\n  return anyOutDated(srcDestPairs);\n}\n\nfunction compilationPairs(\n  srcFiles: string[],\n  outDir: string\n): [string, string][] {\n  return srcFiles.map((file) => {\n    const outFile = changeSuffix(file, \".js\");\n    const outPath = path.join(outDir, outFile);\n    return [file, outPath];\n  });\n}\n\nfunction anyOutDated(filePairs: [string, string][]): boolean {\n  const found = filePairs.find(([srcPath, outPath]) => {\n    if (!fs.existsSync(outPath)) {\n      return true;\n    }\n    const srcTime = fs.statSync(srcPath).mtime;\n    const outTime = fs.statSync(outPath).mtime;\n    return srcTime > outTime;\n  });\n\n  return found !== undefined;\n}\n\nfunction changeSuffix(filePath: string, suffix: string): string {\n  const dir = path.dirname(filePath);\n  const curSuffix = path.extname(filePath);\n  const base = path.basename(filePath, curSuffix);\n  return path.join(dir, base + suffix);\n}\n\nexport function time<T>(fn: () => T, label?: string): T {\n  const start = process.hrtime();\n  const result = fn();\n  const elapsed = process.hrtime(start);\n  const msg = label ? label + \" \" : \"\";\n  console.log(`${msg}${elapsed}`);\n  return result;\n}\n","import {\n  defaultOutDir,\n  expectFilesExist,\n  jsOutFile,\n  loadTsConfig\n} from \"config-file-ts\";\nimport glob from \"glob\";\nimport path from \"path\";\nimport fs from \"fs\";\nimport yargs from \"yargs\";\nimport TysConfig from \"./TysConfig\";\n\nexport interface ScriptysParams {\n  tsFile: string;\n  sources: string[];\n  realOutDir: string;\n  fullCommand: string;\n}\n\n/** Parse and validate command line and config parameters */\nexport function scriptysParams(args: string[]): ScriptysParams | undefined {\n  const params = parseScriptysArgs(args);\n  if (!params) {\n    return undefined;\n  }\n\n  const config = getConfiguration(params);\n  if (!config) {\n    console.error(\"tys configuration not understood\", args);\n    return undefined;\n  }\n  const { tsFile, otherTsFiles, outDir, command } = config;\n  const exist = expectFilesExist([tsFile]);\n  if (!exist) {\n    console.error(`scriptysParams: ${tsFile} not found`);\n    return undefined;\n  }\n\n  const sources = [tsFile, ...otherSources(otherTsFiles)];\n  const realOutDir = outDir || tysDefaultOutDir(tsFile);\n  const fullCommand = commandToRun(\n    tsFile,\n    realOutDir,\n    params.commandArgs,\n    command\n  );\n\n  return {\n    tsFile,\n    sources,\n    realOutDir,\n    fullCommand\n  };\n}\n\nexport interface ParsedArguments {\n  config?: string;\n  tsFile?: string;\n  otherTsFiles?: string[];\n  command?: string;\n  outDir?: string;\n  commandArgs: string[];\n}\n\n/**\n * Parse command line arguments for scriptys\n * @param args command line argument array\n * @param _launcher  (for tests) override launch command name (normally argv[0])\n */\nexport function parseScriptysArgs(\n  args: string[],\n  _launcher?: string\n): ParsedArguments | undefined {\n  const rawLauncher = _launcher || yargs.parse(\"\").$0;\n  const launcher = path.basename(rawLauncher);\n  if (launcher === \"tys\" || launcher === \"tys.js\") {\n    return tysArguments(args);\n  }\n  return nonTysArguments(launcher, args);\n}\n\n/** Interpret arguments when launched as tys */\nfunction tysArguments(args: string[]): ParsedArguments | undefined {\n  const [tysArgs, commandArgs] = splitAtDDash(args);\n  const yargArgs = tysLocalArgs(tysArgs);\n  const unparsed = yargArgs._.slice();\n  const config = configParameter(yargArgs.config);\n  let tsFile: string | undefined;\n  const { command, outDir, otherTsFiles} = yargArgs;\n  if (!config) {\n    tsFile = unparsed.shift();\n  }\n  commandArgs.push(...unparsed);\n\n  const parsedArgs: ParsedArguments = {\n    config,\n    tsFile,\n    otherTsFiles,\n    outDir,\n    command,\n    commandArgs\n  };\n\n  return parsedArgs;\n}\n\n/** When not launched as tys (e.g. as gulptys) arguments go directly to command\n * and config file is based on name, e.g. gulptys.config.ts.\n */\nfunction nonTysArguments(launcher: string, args: string[]): ParsedArguments {\n  const config = launcher + \".config.ts\";\n  return {\n    config,\n    commandArgs: args\n  };\n}\n\n/** split a set of arguments before and after a \"--\"  */\nfunction splitAtDDash(args: string[]): [string[], string[]] {\n  const found = args.findIndex(s => s === \"--\");\n  if (found !== -1) {\n    const before = args.slice(0, found);\n    const after = args.slice(found + 1);\n    return [before, after];\n  }\n  return [args, []];\n}\n\nfunction tysLocalArgs(args: string[]) {\n  return yargs\n    .option(\"config\", {\n      alias: \"c\",\n      string: true,\n      describe: \"tys configuration file\"\n    })\n    .option(\"otherTsFiles\", {\n      string: true,\n      array: true,\n      describe: \"additional typescript files (glob syntax)\"\n    })\n    .option(\"command\", {\n      string: true,\n      describe: \"command to run after compiling\"\n    })\n    .option(\"outDir\", {\n      string: true,\n      describe: \"directory for compiled js files\"\n    })\n    .help()\n    .usage(\n      \"$0 tsFile \\n$0 -c [tysConfigFile]\\nsymLinkToTys   # uses symlinkToTys.config.ts as config\"\n    )\n    .parse(args);\n}\n\nfunction configParameter(config: string | undefined): string | undefined {\n  if (typeof config === \"string\" && config.length > 0) {\n    return config;\n  } else {\n    return undefined;\n  }\n}\n\nfunction otherSources(otherTsGlobs: string[] | undefined): string[] {\n  const sources: string[] = [];\n  if (otherTsGlobs) {\n    for (const tsGlob of otherTsGlobs) {\n      sources.push(...glob.sync(tsGlob));\n    }\n  }\n  return sources;\n}\n\nexport function commandToRun(\n  tsFile: string,\n  realOutDir: string,\n  cmdArgs: string[],\n  command?: string\n) {\n  const jsPath = jsOutFile(tsFile, realOutDir);\n  const realCmd = command || `node ${jsPath}`;\n  return `${realCmd} ${cmdArgs}`;\n}\n\nconst launcherArg = /^(?:node|yarn|npm)$/;\n\nfunction isLauncherArg(arg: string): boolean {\n  return path.basename(arg).match(launcherArg) !== null;\n}\n\nfunction getConfiguration(params: ParsedArguments): TysConfig | undefined {\n  const { config, tsFile, otherTsFiles , command, outDir } = params;\n  if (config) {\n    let configPath = config;\n    if (!fs.existsSync(config) && !path.isAbsolute(config)) {\n      configPath = path.join(__dirname, config);\n      if (!fs.existsSync(configPath)) {\n        console.log(\"config not found:\", config, configPath);\n        return undefined;\n      }\n    }\n    return loadTsConfig<TysConfig>(configPath);\n  } else if (tsFile) {\n    return {\n      tsFile,\n      outDir,\n      command,\n      otherTsFiles\n    };\n  } else {\n    console.error(\"no tsFile no config.tys.ts\");\n    return undefined;\n  }\n}\n\nexport function stripLauncherArgs(argv: string[]): string[] {\n  if (isLauncherArg(argv[0])) {\n    return argv.slice(2);\n  } else {\n    return argv.slice(1);\n  }\n}\n\nexport function tysDefaultOutDir(tsFile: string): string {\n  return defaultOutDir(path.resolve(tsFile), \"tys\");\n}\n","/* sriptys (or tys for short) is a launcher to run TypeScript on node.\n * It supports caching and scripts split over multiple source files.\n *\n * Tys can be also configured to launch scripts other than the one being compiled\n * which is handy to compile config files for other tools.\n */\n\nimport { compileIfNecessary, jsOutFile } from \"config-file-ts\";\nimport { run } from \"./execUtil\";\nimport { scriptysParams, stripLauncherArgs, tysDefaultOutDir } from \"./scriptysArgs\";\nimport TysConfig from \"./TysConfig\";\n\nexport { TysConfig, run, stripLauncherArgs };\n\n/** Launch scriptys\n *\n * @param argv array containing launcher program name, and command line arguments\n * @returns the result of the executed script\n */\nexport async function scriptysArgv(argv: string[]): Promise<number> {\n  const args = stripLauncherArgs(argv);\n  return runScriptys(args);\n}\n\n/** Launch scriptys\n * @param cmdLine command line arguments to tys\n * @returns the result of the executed script\n */\nexport async function scriptysCommandLine(cmdLine: string): Promise<number> {\n  const args = cmdLine.split(/\\s+/);\n  return runScriptys(args);\n}\n\n/** @return the output path to a .js file compiled from a .ts file */\nexport function locateJsOut(tsFile: string, outDir?: string): string {\n  const realOutDir = outDir || tysDefaultOutDir(tsFile);\n  return jsOutFile(tsFile, realOutDir);\n}\n\n/** Launch scriptys\n *\n * @param args command line arguments\n * @returns the result of the executed script\n */\nexport async function runScriptys(args: string[]): Promise<number> {\n  const params = scriptysParams(args);\n  if (!params) {\n    return Promise.reject(`invalid scriptys parameters: ${args}`);\n  }\n  const { sources, realOutDir, fullCommand } = params;\n\n  const built = compileIfNecessary(sources, realOutDir);\n  if (!built) {\n    return Promise.resolve(-2);\n  }\n\n  return run(fullCommand);\n}\n"],"names":["exec","spawn","once","expectFilesExist","jsOutFile","loadTsConfig","defaultOutDir","compileIfNecessary"],"mappings":"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"}